
package org.wso2.carbon.registry.acidothinterface.registrationservie_wsdl;

import registerparticipantresponse.RegisterParticipantResponse;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.*;
import java.util.concurrent.Future;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RegistrationService", targetNamespace = "http://registration.server/")
@XmlSeeAlso({
    registerparticipant.ObjectFactory.class,
    registerparticipantresponse.ObjectFactory.class,
    registration.ObjectFactory.class
})
public interface RegistrationService {


    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<registerparticipantresponse.RegisterParticipantResponse>
     */
    @WebMethod(operationName = "registerParticipant")
    @RequestWrapper(localName = "registerParticipant", targetNamespace = "http://registration.server/", className = "registerparticipant.RegisterParticipant")
    @ResponseWrapper(localName = "registerParticipantResponse", targetNamespace = "http://registration.server/", className = "registerparticipantresponse.RegisterParticipantResponse")
    public Response<RegisterParticipantResponse> registerParticipantAsync(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            String arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            String arg2,
            @WebParam(name = "arg3", targetNamespace = "")
            int arg3);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "registerParticipant")
    @RequestWrapper(localName = "registerParticipant", targetNamespace = "http://registration.server/", className = "registerparticipant.RegisterParticipant")
    @ResponseWrapper(localName = "registerParticipantResponse", targetNamespace = "http://registration.server/", className = "registerparticipantresponse.RegisterParticipantResponse")
    public Future<?> registerParticipantAsync(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            String arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            String arg2,
            @WebParam(name = "arg3", targetNamespace = "")
            int arg3,
            @WebParam(name = "asyncHandler", targetNamespace = "")
            AsyncHandler<RegisterParticipantResponse> asyncHandler);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registerParticipant", targetNamespace = "http://registration.server/", className = "registerparticipant.RegisterParticipant")
    @ResponseWrapper(localName = "registerParticipantResponse", targetNamespace = "http://registration.server/", className = "registerparticipantresponse.RegisterParticipantResponse")
    @Action(input = "http://registration.server/RegistrationService/registerParticipantRequest", output = "http://registration.server/RegistrationService/registerParticipantResponse")
    public boolean registerParticipant(
            @WebParam(name = "arg0", targetNamespace = "")
            String arg0,
            @WebParam(name = "arg1", targetNamespace = "")
            String arg1,
            @WebParam(name = "arg2", targetNamespace = "")
            String arg2,
            @WebParam(name = "arg3", targetNamespace = "")
            int arg3);

}
