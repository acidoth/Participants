#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thriftlib.Thrift import TType, TMessageType, TException, TApplicationException

from thriftlib.transport import TTransport
from thriftlib.protocol import TBinaryProtocol, TProtocol
try:
  from thriftlib.protocol import fastbinary
except:
  fastbinary = None



class EndPointReference:
  """
  Attributes:
   - address
   - privateInstance
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'address', None, None, ), # 1
    (2, TType.I32, 'privateInstance', None, None, ), # 2
  )

  def __init__(self, address=None, privateInstance=None,):
    self.address = address
    self.privateInstance = privateInstance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.privateInstance = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EndPointReference')
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 1)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.privateInstance is not None:
      oprot.writeFieldBegin('privateInstance', TType.I32, 2)
      oprot.writeI32(self.privateInstance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.address is None:
      raise TProtocol.TProtocolException(message='Required field address is unset!')
    if self.privateInstance is None:
      raise TProtocol.TProtocolException(message='Required field privateInstance is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CoordinationContext:
  """
  Attributes:
   - identifier
   - coordination_type
   - registrationEPR
   - expires
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'identifier', None, None, ), # 1
    (2, TType.STRING, 'coordination_type', None, None, ), # 2
    (3, TType.STRUCT, 'registrationEPR', (EndPointReference, EndPointReference.thrift_spec), None, ), # 3
    (4, TType.I32, 'expires', None, None, ), # 4
  )

  def __init__(self, identifier=None, coordination_type=None, registrationEPR=None, expires=None,):
    self.identifier = identifier
    self.coordination_type = coordination_type
    self.registrationEPR = registrationEPR
    self.expires = expires

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.identifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.coordination_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.registrationEPR = EndPointReference()
          self.registrationEPR.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.expires = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CoordinationContext')
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.STRING, 1)
      oprot.writeString(self.identifier)
      oprot.writeFieldEnd()
    if self.coordination_type is not None:
      oprot.writeFieldBegin('coordination_type', TType.STRING, 2)
      oprot.writeString(self.coordination_type)
      oprot.writeFieldEnd()
    if self.registrationEPR is not None:
      oprot.writeFieldBegin('registrationEPR', TType.STRUCT, 3)
      self.registrationEPR.write(oprot)
      oprot.writeFieldEnd()
    if self.expires is not None:
      oprot.writeFieldBegin('expires', TType.I32, 4)
      oprot.writeI32(self.expires)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.identifier is None:
      raise TProtocol.TProtocolException(message='Required field identifier is unset!')
    if self.coordination_type is None:
      raise TProtocol.TProtocolException(message='Required field coordination_type is unset!')
    if self.registrationEPR is None:
      raise TProtocol.TProtocolException(message='Required field registrationEPR is unset!')
    if self.expires is None:
      raise TProtocol.TProtocolException(message='Required field expires is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
